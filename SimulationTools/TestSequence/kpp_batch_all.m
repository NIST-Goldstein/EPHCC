%% Copyright 2018 Alliance for Sustainable Energy, LLC
%
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
% and associated documentation files (the "Software"), to deal in the Software without restriction, 
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
% BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, THE COPYRIGHT HOLDERS, THE UNITED STATES, 
% THE UNITED STATES DEPARTMENT OF ENERGY, OR ANY OF THEIR EMPLOYEES BE LIABLE FOR ANY CLAIM, 
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%
% Author: Przemyslaw Koralewicz / NREL
% Date: 2017

path = 'C:\Users\pkoralew\Documents\10_Projects\11_MicrogridChallange\MGCP2017_Team';

runs = {struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170927_run1_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170927_run2_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170927_run3_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170927_run4.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170927_run5_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170928_run6_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170928_run7_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170928_run8_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20170928_run9.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171002_run10_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171002_run11_fast_crash.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171002_run12_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171002_run13_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171002_run14_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171002_run15_crash.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171003_run16_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171003_run17.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171003_run18_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171003_run19_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171003_run20.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171003_run21_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171003_run22.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171004_run23.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171004_run24_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171005_run25_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171005_run25_fast_s2.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171005_run26_fast.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171005_run26_fast_s2.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171005_run27_s2.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171005_run28.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171006_run30_fast_s2.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171006_run31_fast_s2.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171006_run32_ESS_discharge.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171006_run33_fast_s1.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171006_run34_fast_s1.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171006_run35_s2.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171006_run36_s1.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 0, 'filename', '20171006_run37_s1.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 1, 'filename', '20171010_run41_s7.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 1, 'filename', '20171010_run42_s8.mat'), ...
        struct('team', 3, 'phil', 0, 'final', 1, 'filename', '20171010_run43_s9.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171027_run50_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171027_run51_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171128_run52_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171128_run54_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171128_run55_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171128_run56_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171128_run57_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171128_run58_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171128_run59_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171129_run60_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171129_run61_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171130_run62_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171130_run63_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171130_run64_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171130_run65_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171130_run66_s9_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171130_run67_s8_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171201_run68_s7_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 0, 'filename', '20171201_run69_s7_phil_fast.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 1, 'filename', '20171201_run71_s17_phil.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 1, 'filename', '20171201_run72_s18_phil.mat'), ...
        struct('team', 3, 'phil', 1, 'final', 1, 'filename', '20171201_run73_s19_phil.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171012_Run1_s2.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171013_Run2_s2.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171013_Run3_s2.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171013_Run4_s2.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171013_Run5_s2.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171013_Run7_s2.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171013_Run8_s2.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171013_Run9_s2.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171013_Run10_s7.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 1, 'filename', '20171014_Run13_s7.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 1, 'filename', '20171014_Run11_s8.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 1, 'filename', '20171014_Run12_s9.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 0, 'filename', '20171205_run32_s9.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 0, 'filename', '20171205_Run33_s9.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171207_Run38_s9_fast.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171207_Run39_s9_fast.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171207_Run40_s8.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171207_Run41_s7.mat'), ...
        struct('team', 4, 'phil', 0, 'final', 0, 'filename', '20171207_Run42_s7.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 0, 'filename', '20171208_Run45_s9_20min.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 0, 'filename', '20171208_Run46_s8_20min.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 0, 'filename', '20171208_Run47_s17.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 0, 'filename', '20171211_Run48_s18_20min.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 1, 'filename', '20171214_Run51_s17.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 1, 'filename', '20171212_Run49_s18.mat'), ...
        struct('team', 4, 'phil', 1, 'final', 1, 'filename', '20171214_Run50_s19.mat')};


    
fields = {
    
    struct('eval', 'runs{i}.team', 'str', 'Team number', 'unit', '-') ...
    struct('eval', 'runs{i}.phil', 'str', 'PHIL enabled', 'unit', '-') ...
    struct('eval', 'runs{i}.filename', 'str', 'File name', 'unit', '-') ...
    struct('eval', 'runs{i}.final', 'str', 'Final eval', 'unit', '-') ...
    struct('eval', 'kpp1.E_good_per_class(Nf,4)', 'str', 'Energy delivered to Critical loads', 'unit', 'kWh') ...
    struct('eval', 'kpp1.E_good_per_class(Nf,3)', 'str', 'Energy delivered to Priority loads', 'unit', 'kWh') ...
    struct('eval', 'kpp1.E_good_per_class(Nf,2)', 'str', 'Energy delivered to Interruptable loads', 'unit', 'kWh') ...
    struct('eval', 'kpp1.E_good_per_class(Nf,1)', 'str', 'Energy delivered to Motor loads', 'unit', 'kWh') ...
    struct('eval', 'kpp1.EO_per_class(Nf,4)', 'str', 'Outage energy of Critical loads', 'unit', 'kWh') ...
    struct('eval', 'kpp1.EO_per_class(Nf,3)', 'str', 'Outage energy of Priority loads', 'unit', 'kWh') ...
    struct('eval', 'kpp1.EO_per_class(Nf,2)', 'str', 'Outage energy of Interruptable loads', 'unit', 'kWh') ...
    struct('eval', 'kpp1.EO_per_class(Nf,1)', 'str', 'Outage energy of Motor loads', 'unit', 'kWh') ...
    struct('eval', 'kpp1.e_batt_diff(Nf,1)', 'str', 'Additional energy stored in ESS1', 'unit', 'kWh') ...
    struct('eval', 'kpp1.e_batt_diff(Nf,2)', 'str', 'Additional energy stored in ESS2', 'unit', 'kWh') ...
    struct('eval', 'kpp1.EP_per_class(Nf,4)', 'str', 'Income from serving Critical loads', 'unit', '$') ...
    struct('eval', 'kpp1.EP_per_class(Nf,3)', 'str', 'Income from serving Priority loads', 'unit', '$') ...
    struct('eval', 'kpp1.EP_per_class(Nf,2)', 'str', 'Income from serving Interruptable loads', 'unit', '$') ...
    struct('eval', 'kpp1.EP_per_class(Nf,1)', 'str', 'Income from serving Motor loads', 'unit', '$') ...
    struct('eval', 'kpp1.EOP_per_class(Nf,4)', 'str', 'Penalty for not serving Critical loads', 'unit', '$') ...
    struct('eval', 'kpp1.EOP_per_class(Nf,3)', 'str', 'Penalty for not serving Priority loads', 'unit', '$') ...
    struct('eval', 'kpp1.EOP_per_class(Nf,2)', 'str', 'Penalty for not serving Interruptable loads', 'unit', '$') ...
    struct('eval', 'kpp1.EOP_per_class(Nf,1)', 'str', 'Penalty for not serving Motor loads', 'unit', '$') ...
    struct('eval', 'kpp1.d_batt_diff_indiv(Nf,1)', 'str', 'Incentive for additional energy stored in ESS1', 'unit', '$') ...
    struct('eval', 'kpp1.d_batt_diff_indiv(Nf,2)', 'str', 'Incentive for additional energy stored in ESS2', 'unit', '$') ...
    struct('eval', 'kpp1.d_cum_total(Nf,1)', 'str', 'KPP1 summary', 'unit', '$') ...
    ... %%
    struct('eval', 'kpp2.e(Nf,1)', 'str', 'Gen1 energy delivered', 'unit', 'kWh') ...
    struct('eval', 'kpp2.e(Nf,2)', 'str', 'Gen2 energy delivered', 'unit', 'kWh') ...
    struct('eval', 'kpp2.e(Nf,3)', 'str', 'Gen3 energy delivered', 'unit', 'kWh') ...
    struct('eval', 'kpp2.f_cum_per_class(Nf,1)', 'str', 'Gen1 fuel used', 'unit', 'gal') ...
    struct('eval', 'kpp2.f_cum_per_class(Nf,2)', 'str', 'Gen2 fuel used', 'unit', 'm^3') ...
    struct('eval', 'kpp2.f_cum_per_class(Nf,3)', 'str', 'Gen3 fuel used', 'unit', 'gal') ...
    struct('eval', 'kpp2.f_cum_per_class(Nf,4)', 'str', 'Gen2 heat recovered', 'unit', 'MBtu') ...
    struct('eval', 'kpp2.d_cum_per_class(Nf,1)', 'str', 'Gen1 fuel cost', 'unit', '$') ...
    struct('eval', 'kpp2.d_cum_per_class(Nf,2)', 'str', 'Gen2 fuel cost', 'unit', '$') ...
    struct('eval', 'kpp2.d_cum_per_class(Nf,3)', 'str', 'Gen3 fuel cost', 'unit', '$') ...
    struct('eval', 'kpp2.d_cum_per_class(Nf,4)', 'str', 'Gen2 heat income', 'unit', '$') ...
    struct('eval', 'kpp2.d_cum_total(Nf,1)', 'str', 'KPP2 summary', 'unit', '$') ...
    ... %%
    struct('eval', 'kpp3.e_per_class(Nf,2)', 'str', 'Energy exported - E_E', 'unit', 'kWh') ...
    struct('eval', 'kpp3.e_per_class(Nf,1)', 'str', 'Energy exported over limit - E_EO', 'unit', 'kWh') ...
    struct('eval', 'kpp3.e_per_class(Nf,3)', 'str', 'Energy imported - E_B', 'unit', 'kWh') ...
    struct('eval', 'kpp3.e_per_class(Nf,4)', 'str', 'Energy imported over limit - E_BO', 'unit', 'kWh') ...
    struct('eval', 'kpp3.e_per_class(Nf,5)', 'str', 'Reactive power over limit - E_RP', 'unit', 'kVArh') ...
    struct('eval', 'kpp3.d_cum_per_class(Nf,2)', 'str', 'Income from E_E', 'unit', '$') ...
    struct('eval', 'kpp3.d_cum_per_class(Nf,1)', 'str', 'Income from E_EO', 'unit', '$') ...
    struct('eval', 'kpp3.d_cum_per_class(Nf,3)', 'str', 'Cost of E_B', 'unit', '$') ...
    struct('eval', 'kpp3.d_cum_per_class(Nf,4)', 'str', 'Cost of E_BO', 'unit', '$') ...
    struct('eval', 'kpp3.d_cum_per_class(Nf,5)', 'str', 'Cost of E_RP', 'unit', '$') ...
    struct('eval', 'kpp3.doe_per_class(Nf,2)', 'str', 'Average exported energy cost - P_E', 'unit', '$/kWh') ...
    struct('eval', 'kpp3.doe_per_class(Nf,1)', 'str', 'Average exported energy over limit cost - E_EO', 'unit', '$/kWh') ...
    struct('eval', 'kpp3.doe_per_class(Nf,3)', 'str', 'Average imported energy cost- E_B', 'unit', '$/kWh') ...
    struct('eval', 'kpp3.doe_per_class(Nf,4)', 'str', 'Average imported energy over limit cost - E_BO', 'unit', '$/kWh') ...
    struct('eval', 'kpp3.doe_per_class(Nf,5)', 'str', 'Reactive power over limit - E_RP', 'unit', 'kVArh') ...
    struct('eval', 'kpp3.d_cum_total(Nf,1)', 'str', 'KPP3 summary', 'unit', '$') ...
    ... %
    struct('eval', 'kpp4.isl1', 'str', 'Length of first islanding', 'unit', 'min') ...
    struct('eval', 'kpp4.isl2', 'str', 'Length of second islanding', 'unit', 'min') ...
    struct('eval', 'kpp4.kW_req', 'str', 'Demand/dispatch command active', 'unit', 'min') ...
    struct('eval', 'kpp4.kVAr_req', 'str', 'Power factor request command active', 'unit', 'min') ...
    struct('eval', 'kpp4.kWHz_req', 'str', 'Demand response (Freq/kW) support requested', 'unit', 'min') ...
    struct('eval', 'kpp4.kVArVolt_req', 'str', 'Volt/Var support requested', 'unit', 'min') ...
    struct('eval', 'kpp4.t_cum_per_class(Nf,1)', 'str', 'Meeting demand/dispatch command', 'unit', 'min') ...
    struct('eval', 'kpp4.t_cum_per_class(Nf,3)', 'str', 'Meeting power factor request command', 'unit', 'min') ...
    struct('eval', 'kpp4.t_cum_per_class(Nf,2)', 'str', 'Following Demand response curve (Freq/kW)', 'unit', 'min') ...
    struct('eval', 'kpp4.t_cum_per_class(Nf,4)', 'str', 'Following Volt/Var support', 'unit', 'min') ...
    struct('eval', 'kpp4.t_cum_per_class(Nf,5)', 'str', 'Violating planned disconnect request', 'unit', 'min') ...
    struct('eval', 'kpp4.t_cum_per_class(Nf,6)', 'str', 'Violating unplanned disconnect', 'unit', 'min') ...
    struct('eval', 'kpp4.d_cum_per_class(Nf,1)', 'str', 'Meeting demand/dispatch command', 'unit', '$') ...
    struct('eval', 'kpp4.d_cum_per_class(Nf,3)', 'str', 'Meeting power factor request command', 'unit', '$') ...
    struct('eval', 'kpp4.d_cum_per_class(Nf,2)', 'str', 'Following Demand response curve (Freq/kW)', 'unit', '$') ...
    struct('eval', 'kpp4.d_cum_per_class(Nf,4)', 'str', 'Following Volt/Var support', 'unit', '$') ...
    struct('eval', 'kpp4.d_cum_per_class(Nf,5)', 'str', 'Violating planned disconnect request', 'unit', '$') ...
    struct('eval', 'kpp4.d_cum_per_class(Nf,6)', 'str', 'Violating unplanned disconnect', 'unit', '$') ...
    struct('eval', 'kpp4.d_cum_total(Nf,1)', 'str', 'KPP4 summary', 'unit', '$') ...
    ... %
    struct('eval', 'kpp5.t_per_class(Nf,1)', 'str', 'Power quality voltage violations N_PQV', 'unit', 'PU*s') ...
    struct('eval', 'kpp5.t_per_class(Nf,2)', 'str', 'Power quality frequency violations N_PQF', 'unit', 'PU*s') ...
    struct('eval', 'kpp5.d_cum_per_class(Nf,1)', 'str', 'Voltage violations penalty', 'unit', '$') ...
    struct('eval', 'kpp5.d_cum_per_class(Nf,2)', 'str', 'Frequency violations penalty', 'unit', '$') ...
    struct('eval', 'kpp5.d_cum_total(Nf,1)', 'str', 'KPP5 summary', 'unit', '$') ...
    ... %
    struct('eval', 'kpp6.t_cum_under(Nf,1)', 'str', 'ESS1 under target SOC', 'unit', 'min') ...
    struct('eval', 'kpp6.t_cum_under(Nf,2)', 'str', 'ESS2 under target SOC', 'unit', 'min') ...
    struct('eval', 'kpp6.d_cum_total(Nf,1)', 'str', 'KPP6 summary', 'unit', '$') ...
    ... %
    struct('eval', 'kpp7.e_pv(Nf,1)', 'str', 'PV1 Energy generated', 'unit', 'kWh') ...
    struct('eval', 'kpp7.e_pv(Nf,2)', 'str', 'PV2 Energy generated', 'unit', 'kWh') ...
    struct('eval', 'kpp7.u_cum_per_class(Nf,1)', 'str', 'Generator starting count', 'unit', '-') ...
    struct('eval', 'kpp7.u_cum_per_class(Nf,2)', 'str', 'ESS1 battery cycling', 'unit', '-') ...
    struct('eval', 'kpp7.u_cum_per_class(Nf,3)', 'str', 'ESS2 battery cycling', 'unit', '-') ...
    struct('eval', 'kpp7.u_cum_per_class(Nf,4)', 'str', 'CB switching', 'unit', '-') ...
    struct('eval', 'kpp7.u_cum_per_class(Nf,5)', 'str', 'Generator overcurrent', 'unit', 'sA^2') ...
    struct('eval', 'kpp7.u_cum_per_class(Nf,6)', 'str', 'Transformer overcurrent', 'unit', 'sA^2') ...
    struct('eval', 'kpp7.u_cum_per_class(Nf,7)', 'str', 'Line overcurrent', 'unit', 'sA^2') ...
    struct('eval', 'kpp7.d_cum_per_class(Nf,1)', 'str', 'Generator starting penalty', 'unit', '$') ...
    struct('eval', 'kpp7.d_cum_per_class(Nf,2)', 'str', 'ESS1 battery cycling penalty', 'unit', '$') ...
    struct('eval', 'kpp7.d_cum_per_class(Nf,3)', 'str', 'ESS2 battery cycling penalty', 'unit', '$') ...
    struct('eval', 'kpp7.d_cum_per_class(Nf,4)', 'str', 'CB switching penalty', 'unit', '$') ...
    struct('eval', 'kpp7.d_cum_per_class(Nf,5)', 'str', 'Generator overcurrent penalty', 'unit', '$') ...
    struct('eval', 'kpp7.d_cum_per_class(Nf,6)', 'str', 'Transformer overcurrent penalty', 'unit', '$') ...
    struct('eval', 'kpp7.d_cum_per_class(Nf,7)', 'str', 'Line overcurrent penalty', 'unit', '$') ...
    struct('eval', 'kpp7.d_cum_total(Nf,1)', 'str', 'KPP7 summary', 'unit', '$') ...
    ... %
    struct('eval', 'kpp8.d_cum_total(Nf,1)', 'str', 'KPP8 summary', 'unit', '$') ...
    }

    clear('exp_data');
   for f=1:length(fields)
        exp_data{1, f} = fields{f}.str;
        exp_data{2, f} = fields{f}.unit;
   end
   

for i=1:length(runs)
    load([path num2str(runs{i}.team) '\6_TestSequence\TestSequence\' runs{i}.filename]); 
   
    %% Process for PHIL or CHIL run
    res.PHIL = runs{i}.phil; % Comment out if CHIL shall be used
    res.Speed = round(30000 / length(res.t));
    
    %%  Initialise supporting data
    prices = init_prices;
    id = init_ID;
    comm = calc_common(res, seq, TxSequenceSpeed);
    seqi = seq_interp(seq, comm.t_sek);

    %% Calc all KPP
    kpp1 = calc_kpp1(res, seqi, comm, prices);
    kpp2 = calc_kpp2(res, seqi, comm, prices, id);
    kpp3 = calc_kpp3(res, seqi, comm, prices, id);
    kpp4 = calc_kpp4(res, seqi, comm, prices, id, kpp3);
    kpp5 = calc_kpp5(res, seqi, comm, prices, id);
    kpp6 = calc_kpp6(res, seqi, comm, prices, kpp4);
    kpp7 = calc_kpp7(res, seqi, comm, prices, id);
    kpp8 = calc_kpp8(kpp1, kpp2, kpp3, kpp4, kpp5, kpp6, kpp7);

    Nf = round(length(res.t)*99.5/100);
    for f=1:length(fields)
        exp_data{2+i, f} = eval(fields{f}.eval);
    end
end

%% save to xlsx file
xlswrite('res_batch.xlsx', exp_data);