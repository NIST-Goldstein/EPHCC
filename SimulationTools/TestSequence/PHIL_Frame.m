%% Copyright 2018 Alliance for Sustainable Energy, LLC
%
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
% and associated documentation files (the "Software"), to deal in the Software without restriction, 
% including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
% and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
% BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, THE COPYRIGHT HOLDERS, THE UNITED STATES, 
% THE UNITED STATES DEPARTMENT OF ENERGY, OR ANY OF THEIR EMPLOYEES BE LIABLE FOR ANY CLAIM, 
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%
% Author: Przemyslaw Koralewicz / NREL
% Date: 2017

function frame = PHIL_Frame()
%% UDP Frame structure
% This file links filename with (udp & modbus) communication link
% it will be used to
%  - encode udp string and save it as files
%  - convert files stored on disk to modbus frames sent to HMI
%  Size - how many words per UDP frame
fr = {   ...
struct('Header', 'Preamble', 'Size', 1) ...
struct('Header', 'ModelType', 'Size', 1) ...
struct('File', 'simtime4.dat', 'Size', 1, 'Scale', 1) ...
struct('Header', 'Waveform', 'Size', 3) ...
struct('Header', 'Relay', 'Size', 5) ...
struct('Header', 'Battery', 'Size', 1) ...
struct('Header', 'Diesel', 'Size', 3) ...
struct('Header', 'NGCHP', 'Size', 10) ...
struct('Header', 'Motor', 'Size', 1) ...
struct('Header', 'PV', 'Size', 1) ...
struct('Header', 'PF', 'Size', 2) ...
struct('Header', 'Misc', 'Size', 1) ...
... % struct('Header', 'Misc1', 'Size', 2) ...      -- automatically generated
... % struct('Header', 'Misc2', 'Size', 2) ...
... % struct('Header', 'Misc3', 'Size', 2) ...
struct('Size', 3, 'Skip', 1) ... % waveforms
struct('File', 'powerreal4.dat', 'Size', 'Relay(1)', 'Scale', 'Relay(2)') ...
struct('File', 'reactivepower4.dat', 'Size', 'Relay(1)', 'Scale', 'Relay(3)') ...
struct('File', 'voltage4.dat', 'Size', 'Relay(1)', 'Scale', 'Relay(4)') ...
struct('File', 'frequency4.dat', 'Size', 'Relay(1)', 'Scale', 'Relay(5)') ...
struct('File', 'breaker4.dat', 'Size', 'Relay(1)') ...
struct('File', 'battery_SoC4.dat', 'Size', 1) ...
... % struct('File', 'battery_Frequency.dat', 'Size', 1, 'Scale', 100) ...
... % struct('File', 'battery_kW.dat', 'Size', 1, 'Scale', 1) ...
... % struct('File', 'battery_kVAR.dat', 'Size', 1, 'Scale', 1) ...
struct('File', 'dieselGenerator_fuelConsumption4.dat',   'Size', 'Diesel(1)', 'Scale', 'Diesel(2)') ...
struct('File', 'dieselGenerator_voltage4.dat',           'Size', 'Diesel(1)', 'Scale', 'Diesel(3)') ...
struct('File', 'ngchpGenerator_voltage4.dat',            'Size', 'NGCHP(1)', 'Scale', 'NGCHP(2)') ...
struct('File', 'ngchpGenerator_tempActual4.dat',         'Size', 'NGCHP(1)', 'Scale', 'NGCHP(3)') ...
struct('File', 'ngchpGenerator_heatRecovered4.dat',      'Size', 'NGCHP(1)', 'Scale', 'NGCHP(4)') ...
struct('File', 'ngchpGenerator_fuelUsage4.dat',          'Size', 'NGCHP(1)', 'Scale', 'NGCHP(5)') ...
struct('File', 'ngchpGenerator_ChpC024.dat',             'Size', 'NGCHP(1)', 'Scale', 'NGCHP(6)') ...
struct('File', 'ngchpGenerator_boilerHeat4.dat',         'Size', 'NGCHP(1)', 'Scale', 'NGCHP(7)') ...
struct('File', 'ngchpGenerator_CHPHeatContribution4.dat','Size', 'NGCHP(1)', 'Scale', 'NGCHP(8)') ...
struct('File', 'ngchpGenerator_boilerNM4.dat',           'Size', 'NGCHP(1)', 'Scale', 'NGCHP(9)') ...
struct('File', 'ngchpGenerator_boilerLbm4.dat',          'Size', 'NGCHP(1)', 'Scale', 'NGCHP(10)') ...
struct('File', 'motor4.dat',         'Size', 'Motor(1)') ...
% struct('File', 'solar_VRMSLL.dat',  'Size', 1) ...
... % struct('File', 'solar_kW.dat',      'Size', 'PV(1)', 'Scale', 'PV(3)') ...
... % struct('File', 'solar_kVAR.dat',    'Size', 'PV(1)', 'Scale', 'PV(4)') ...
% struct('File', 'pf_val.dat',        'Size', 'PF(1)', 'Scale', 'PF(2)') ...
% struct('File', 'pf_pf_impexp.dat',  'Size', 'PF(1)', 'Scale', 'PF(2)') ...
% struct('File', 'pf_pf_laglead.dat', 'Size', 'PF(1)', 'Scale', 'PF(2)') ...
% struct('File', 'misc_1.dat',  'Size', 'Misc_1(1)', 'Scale', 'Misc_1(2)') ...
% struct('File', 'misc_2.dat',  'Size', 'Misc_2(1)', 'Scale', 'Misc_2(2)') ...
% struct('Size', 2, 'Skip', 1) ... % Checksum
    };

for i=1:length(fr)
    if isfield(fr{i},'File')
        fr{i}.Name = fr{i}.File(1:length(fr{i}.File) - 4);
    end
end

frame = fr;