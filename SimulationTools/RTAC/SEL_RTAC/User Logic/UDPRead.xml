<RTACModule>
  <POU>
    <ExportSource>
      <Schema>20</Schema>
      <DeviceMOT>3530</DeviceMOT>
    </ExportSource>
    <Name>UDPRead</Name>
    <POUKind>Program</POUKind>
    <Content>
      <Interface><![CDATA[PROGRAM UDPRead
VAR
// Configuration Information
LocalIPAddress : STRING(15) := '0.0.0.0'; // Uses any available interface.
LocalPortNumber : UINT := 7000;
// Storage for inbound and outbound messages.
DataIn : SELEthernetController.class_ByteVector;
DataOut : STRING(2) := 'OK';
// The socket and its initialization data.
UdpSocket : class_UdpSocket(maxPacketSize := 1024);
SocketInitialized : BOOL := FALSE;
LocalIP : SELEthernetController.INADDR;
// Workbench variables for storing current client information.
DestIP : SELEthernetController.INADDR;
DestPort : UINT;
PacketValid : BOOL;
END_VAR]]></Interface>
      <Implementation><![CDATA[IF NOT SocketInitialized THEN
fun_StringToInaddr(LocalIPAddress, ipAddr => LocalIP);
UdpSocket.bootstrap_SetLocalIP(LocalPortNumber, LocalIP);
UdpSocket.Open();
SocketInitialized := TRUE;
ELSE
IF 0 <> UdpSocket.ReceiveFrom(DataIn, fromIpAddr => DestIP, fromPort => DestPort)
THEN
PacketValid := TRUE; // Set PacketValid based on the contents of DataIn.
IF PacketValid THEN
UdpSocket.SendData(ADR(DataOut), 2, DestIP, DestPort);
END_IF
END_IF
END_IF]]></Implementation>
    </Content>
  </POU>
</RTACModule>