<RTACModule>
  <POU>
    <ExportSource>
      <Schema>22</Schema>
      <DeviceMOT>3530</DeviceMOT>
    </ExportSource>
    <Name>UDPBansheeRead</Name>
    <POUKind>Program</POUKind>
    <Content>
      <Interface><![CDATA[PROGRAM UDPBansheeRead
VAR
// Configuration Information
LocalIPAddress : STRING(15) := '0.0.0.0'; // Uses any available interface.
LocalPortNumber : UINT := 7200;
// Storage for inbound and outbound messages.
DataIn : SELEthernetController.class_ByteVector;
DataOut : STRING(2) := 'OK';
// The socket and its initialization data.
UdpSocket : class_UdpSocket(maxPacketSize := 2048);
SocketInitialized : BOOL := FALSE;
LocalIP : SELEthernetController.INADDR;
// Workbench variables for storing current client information.
DestIP : SELEthernetController.INADDR;
DestPort : UINT;
PacketValid : BOOL;
PacketSize: UDINT;
PacketPreamble: BYTE;
ii : UINT;
SignalsUINT : POINTER TO ARRAY [1..342] OF UDINT;
i16_Raw : ARRAY[1..342] OF INT;
pSignalsSwap : POINTER TO ARRAY[1..2] OF BYTE;
pTempSwap : POINTER TO ARRAY[1..4] OF BYTE;

uWdg : UINT := 0;
bWdgDataValid : SEL_IEC_TYPES.validity_t := invalid;

BRK_CNT : UINT := 47;
REAL_ID : UINT := 38;
REACT_ID : UINT := 85; //REAL_ID + BRK_CNT;
VPU_ID : UINT := 132;
FREQ_ID : UINT := 179;
STATUS_ID : UINT := 226; //REAL_ID + 4*BRK_CNT;
END_VAR]]></Interface>
      <Implementation><![CDATA[IF NOT SocketInitialized THEN
fun_StringToInaddr(LocalIPAddress, ipAddr => LocalIP);
UdpSocket.bootstrap_SetLocalIP(LocalPortNumber, LocalIP);
UdpSocket.Open();
SocketInitialized := TRUE;
ELSE
IF 0 <> UdpSocket.ReceiveFrom(DataIn, fromIpAddr => DestIP, fromPort => DestPort)
THEN
PacketSize := DataIn.Size;
SignalsUINT := DataIn.pt_Data;

DataIn.GetAt(1, element => PacketPreamble);
FOR ii:=1 TO UDINT_TO_UINT(PacketSize)/4 BY 1 DO
	pTempSwap := ADR(SignalsUINT^[ii]);
	pSignalsSwap := ADR(i16_Raw[ii]);
	pSignalsSwap^[2] := pTempSwap^[1];
	pSignalsSwap^[1] := pTempSwap^[2];
END_FOR

uWdg := 50;	// 5sec assuming main task runs 100ms
bWdgDataValid := good;
//PacketValid := TRUE; // Set PacketValid based on the contents of DataIn.
//IF PacketValid THEN
//UdpSocket.SendData(ADR(DataOut), 2, DestIP, DestPort);
//END_IF
END_IF
END_IF

IF uWdg > 0 THEN
	uWdg := uWdg - 1;	
ELSE
	bWdgDataValid := invalid;
END_IF]]></Implementation>
    </Content>
  </POU>
</RTACModule>