function frame = BANSHEE_Frame()
%% UDP Frame structure
% This file links filename with (udp & modbus) communication link
% it will be used to
%  - encode udp string and save it as files
%  - convert files stored on disk to modbus frames sent to HMI
%  Size - how many words per UDP frame
fr = {   ...
struct('Header', 'Preamble', 'Size', 1) ...
struct('Header', 'ModelType', 'Size', 1) ...
struct('File', 'simtime.dat', 'Size', 2, 'Scale', 1) ...
... % removed struct('Header', 'Waveform', 'Size', 3) ...
struct('Header', 'Relay', 'Size', 5) ...
struct('Header', 'Battery', 'Size', 1) ...
struct('Header', 'Diesel', 'Size', 3) ...
struct('Header', 'NGCHP', 'Size', 10) ...
struct('Header', 'Motor', 'Size', 1) ...
struct('Header', 'Quality', 'Size', 3) ...
... % removed struct('Header', 'PV', 'Size', 1) ...
... % removed struct('Header', 'PF', 'Size', 2) ...
struct('Header', 'Misc', 'Size', 1) ...
... % struct('Header', 'Misc1', 'Size', 2) ...      -- automatically generated
... % struct('Header', 'Misc2', 'Size', 2) ...
... % struct('Header', 'Misc3', 'Size', 2) ...
... % removed struct('Size', 3, 'Skip', 1) ... % waveforms
struct('File', 'powerreal.dat', 'Size', 'Relay(1)', 'Scale', 'Relay(2)') ...
struct('File', 'reactivepower.dat', 'Size', 'Relay(1)', 'Scale', 'Relay(3)') ...
struct('File', 'voltage.dat', 'Size', 'Relay(1)', 'Scale', 'Relay(4)') ...
struct('File', 'frequency.dat', 'Size', 'Relay(1)', 'Scale', 'Relay(5)') ...
struct('File', 'breaker.dat', 'Size', 'Relay(1)') ...
struct('File', 'battery_SoC.dat', 'Size', 'Battery') ...
... % struct('File', 'battery_Frequency.dat', 'Size', 1, 'Scale', 100) ...
... % struct('File', 'battery_kW.dat', 'Size', 1, 'Scale', 1) ...
... % struct('File', 'battery_kVAR.dat', 'Size', 1, 'Scale', 1) ...
struct('File', 'dieselGenerator_fuelConsumption.dat',   'Size', 'Diesel(1)', 'Scale', 'Diesel(2)') ...
struct('File', 'dieselGenerator_voltage.dat',           'Size', 'Diesel(1)', 'Scale', 'Diesel(3)') ...
struct('File', 'ngchpGenerator_voltage.dat',            'Size', 'NGCHP(1)', 'Scale', 'NGCHP(2)') ...
struct('File', 'ngchpGenerator_tempActual.dat',         'Size', 'NGCHP(1)', 'Scale', 'NGCHP(3)') ...
struct('File', 'ngchpGenerator_heatRecovered.dat',      'Size', 'NGCHP(1)', 'Scale', 'NGCHP(4)') ...
struct('File', 'ngchpGenerator_fuelUsage.dat',          'Size', 'NGCHP(1)', 'Scale', 'NGCHP(5)') ...
struct('File', 'ngchpGenerator_ChpC02.dat',             'Size', 'NGCHP(1)', 'Scale', 'NGCHP(6)') ...
struct('File', 'ngchpGenerator_boilerHeat.dat',         'Size', 'NGCHP(1)', 'Scale', 'NGCHP(7)') ...
struct('File', 'ngchpGenerator_CHPHeatContribution.dat','Size', 'NGCHP(1)', 'Scale', 'NGCHP(8)') ...
struct('File', 'ngchpGenerator_boilerNM.dat',           'Size', 'NGCHP(1)', 'Scale', 'NGCHP(9)') ...
struct('File', 'ngchpGenerator_boilerLbm.dat',          'Size', 'NGCHP(1)', 'Scale', 'NGCHP(10)') ...
... %struct('File', 'motor.dat',         'Size', 'Motor(1)') ...
struct('File', 'motor.dat',         'Size', 8) ...
struct('File', 'quality_Hz.dat',    'Size', 'Quality(1)') ...
struct('File', 'quality_Volt.dat',  'Size', 'Quality(1)') ...
... % removed struct('File', 'solar_VRMSLL.dat',  'Size', 1) ...
... % struct('File', 'solar_kW.dat',      'Size', 'PV(1)', 'Scale', 'PV(3)') ...
... .% struct('File', 'solar_kVAR.dat',    'Size', 'PV(1)', 'Scale', 'PV(4)') ...
... % removed struct('File', 'pf_val.dat',        'Size', 'PF(1)', 'Scale', 'PF(2)') ...
... % removed struct('File', 'pf_pf_impexp.dat',  'Size', 'PF(1)', 'Scale', 'PF(2)') ...
... % removed struct('File', 'pf_pf_laglead.dat', 'Size', 'PF(1)', 'Scale', 'PF(2)') ...
struct('File', 'misc_1.dat',  'Size', 'Misc_1(1)', 'Scale', 'Misc_1(2)') ...
struct('File', 'misc_2.dat',  'Size', 'Misc_2(1)', 'Scale', 'Misc_2(2)') ...
struct('Size', 2, 'Skip', 1) ... % Checksum
    };

for i=1:length(fr)
    if isfield(fr{i},'File')
        fr{i}.Name = fr{i}.File(1:length(fr{i}.File) - 4);
    end
end

frame = fr;